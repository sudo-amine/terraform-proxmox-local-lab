terraform {
  required_providers {
    proxmox = {
      source  = "Telmate/proxmox"
      version = "3.0.1-rc6"
    }
  }
}



variable "proxmox_node" {
  description = "Proxmox node where the VM will be created"
  default     = "proxmox" # Replace with your Proxmox node name
}

variable "cloud_image_url" {
  description = "URL of the Cloud-Init ready image (e.g., Ubuntu)"
  default     = "https://cloud-images.ubuntu.com/jammy/current/jammy-server-cloudimg-amd64.img"
}

variable "storage_pool" {
  description = "The storage pool to use for VM disks"
  default     = "local-lvm" # Replace with your storage pool
}

data "vault_kv_secret_v2" "proxmox_token" {
  name  = "proxmox"
  mount = "secret" # Path to KV engine
}

provider "proxmox" {
  pm_api_url          = "https://192.168.1.10:8006/api2/json"
  pm_api_token_id     = "terraform-prov@pve!tid"
  pm_api_token_secret = data.vault_kv_secret_v2.proxmox_token.data.token
  pm_tls_insecure     = false
}

# Download the Cloud-Init image and upload it to Proxmox
resource "null_resource" "download_and_upload_image" {
  provisioner "local-exec" {
    command = <<EOT
      ssh -o StrictHostKeyChecking=no root@192.168.1.10 "
        wget -O /tmp/cloud-image.img ${var.cloud_image_url} && \
        qm importdisk 9001 /tmp/cloud-image.img ${var.storage_pool} && \
        rm /tmp/cloud-image.img
      "
    EOT
  }
}

# Create the VM with Cloud-Init
resource "proxmox_vm_qemu" "ci_template" {
  name        = "ci-template"
  target_node = var.proxmox_node
  desc        = "Ubuntu Cloud Template created with Terraform"
  vmid        = 9001

  # VM hardware configuration
  memory  = 2048
  cores   = 1
  sockets = 1
  onboot  = false
  agent   = 1
  scsihw  = "virtio-scsi-pci"

  # Attach the imported disk as SCSI
  disk {
    type    = "disk"
    storage = var.storage_pool
    size    = "10G" # Adjust size as needed
    slot    = "scsi0"
  }

  # Add the Cloud-Init disk
  disk {
    type    = "cloudinit"
    storage = var.storage_pool
    slot    = "ide2"
  }

  # Set boot order to prioritize the imported disk
  boot     = "order=scsi0"
  bootdisk = "scsi0"

  # Networking configuration
  network {
    model  = "virtio"
    bridge = "vmbr0" # Replace with your network bridge
    id     = 0
  }

  serial {
    id   = 0
    type = "socket"
  }

  # Cloud-Init configuration
  qemu_os    = "l26" # Linux 2.6/3.x/4.x/5.x
  sshkeys    = local.ssh_public_key
  ciuser     = "sudo-amine"
  cipassword = "password123" # Replace or avoid using passwords for SSH-only login

  # Ensure the VM shuts down after provisioning for conversion to template
  ipconfig0 = "ip=192.168.1.100/24,gw=192.168.1.1" # Replace with your network settings

  vm_state = "stopped"

  # Wait for Cloud-Init
  ci_wait = 30

  depends_on = [null_resource.download_and_upload_image]
}

# Wait for the VM to boot and SSH to be ready
resource "null_resource" "wait_for_vm_ready" {
  provisioner "local-exec" {
    command = <<EOT
      ssh -o StrictHostKeyChecking=no root@192.168.1.10 "
        while true; do
          if qm status 9001 | grep -q 'status: running'; then
            if ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -o LogLevel=ERROR sudo-amine@192.168.1.100 'echo SSH Ready'; then
              echo 'VM is running and SSH is ready'
              break
            fi
          fi
          echo 'Waiting for VM to be fully ready...'
          sleep 5
        done
      "
    EOT
  }

  depends_on = [proxmox_vm_qemu.ci_template]
}

# Install qemu-guest-agent after VM is ready
resource "null_resource" "install_qemu_guest_agent" {
  provisioner "local-exec" {
    command = <<EOT
      ssh -o StrictHostKeyChecking=no root@192.168.1.10 "
        ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -o LogLevel=ERROR sudo-amine@192.168.1.100 '
          sudo apt-get update && \
          sudo apt-get install -y qemu-guest-agent && \
          sudo systemctl start qemu-guest-agent && \
          sudo systemctl enable qemu-guest-agent
        ' && \
        qm shutdown 9001
      "
    EOT
  }

  depends_on = [null_resource.wait_for_vm_ready]
}

# Convert the VM to a template
resource "null_resource" "convert_to_template" {
  provisioner "local-exec" {
    command = <<EOT
      ssh -o StrictHostKeyChecking=no root@192.168.1.10 "
        qm template 9001
      "
    EOT
  }

  depends_on = [null_resource.install_qemu_guest_agent]
}

output "ci_template_id" {
  value = proxmox_vm_qemu.ci_template.id
}
