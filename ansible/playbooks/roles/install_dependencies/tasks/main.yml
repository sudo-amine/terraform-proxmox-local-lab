# Update apt cache
- name: Update apt cache
  ansible.builtin.apt:
    update_cache: true

# Install prerequisite packages for Kubernetes apt repository
- name: Install required packakges for Kubernetes
  ansible.builtin.apt:
    name:
      - apt-transport-https
      - ca-certificates
      - curl
    state: present

# Configure kernel modules and load them
- name: Set up required kernel modules
  ansible.builtin.copy:
    dest: /etc/modules-load.d/k8s.conf
    content: |
      overlay
      br_netfilter
    mode: "0644"

- name: Load kernel modules
  ansible.builtin.shell: |
    set -o pipefail
    modprobe overlay
    modprobe br_netfilter
  changed_when: false

# Configure kernel parameters and apply them
- name: Set required kernel parameters
  ansible.builtin.copy:
    dest: /etc/sysctl.d/k8s.conf
    content: |
      net.bridge.bridge-nf-call-iptables  = 1
      net.bridge.bridge-nf-call-ip6tables = 1
      net.ipv4.ip_forward                 = 1
    mode: "0644"

- name: Apply kernel parameters
  ansible.builtin.command: sysctl --system
  changed_when: false

# Install container runtime (containerd)
- name: Install containerd
  ansible.builtin.apt:
    name: containerd
    state: present

- name: Configure containerd to use systemd cgroups
  ansible.builtin.shell: |
    set -o pipefail
    mkdir -p /etc/containerd
    containerd config default | sed 's/SystemdCgroup = false/SystemdCgroup = true/' > /etc/containerd/config.toml
  args:
    creates: /etc/containerd/config.toml

- name: Restart containerd
  ansible.builtin.service:
    name: containerd
    state: restarted
    enabled: true

# Download Kubernetes public signing key
- name: Download Kubernetes public signing key
  ansible.builtin.shell: |
    set -o pipefail
    mkdir -p /etc/apt/keyrings
    curl -fsSL https://pkgs.k8s.io/core:/stable:/$(curl -L -s \
    https://dl.k8s.io/release/stable.txt | \
    awk 'BEGIN { FS="." } { printf "%s.%s", $1, $2 }')/deb/Release.key \
    | gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg
  args:
    creates: /etc/apt/keyrings/kubernetes-apt-keyring.gpg

# Add Kubernetes apt repository
- name: Add Kubernetes apt repository
  ansible.builtin.shell: |
    set -o pipefail
    echo "deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] \
    https://pkgs.k8s.io/core:/stable:/$(curl -L -s \
    https://dl.k8s.io/release/stable.txt | \
    awk 'BEGIN { FS="." } { printf "%s.%s", $1, $2 }')/deb/ /" >\
     /etc/apt/sources.list.d/kubernetes.list
  args:
    creates: /etc/apt/sources.list.d/kubernetes.list

# Update apt package index and install Kubernetes tools
- name: Install kubelet, kubeadm, and kubectl
  ansible.builtin.apt:
    name:
      - kubelet
      - kubeadm
      - kubectl
    state: present
    update_cache: true

- name: Hold Kubernetes packages at their current version
  ansible.builtin.command: apt-mark hold kubelet kubeadm kubectl
  changed_when: false

- name: Configure crictl
  ansible.builtin.command: |
    crictl config --set runtime-endpoint=unix:///run/containerd/containerd.sock --set image-endpoint=unix:///run/containerd/containerd.sock
  changed_when: false

# Detect the primary IP and set it as an environment variable
- name: Detect primary IP address
  ansible.builtin.shell: |
    set -o pipefail ip -4 route get 1 | awk '{print $7; exit}'
  register: primary_ip
  changed_when: false

- name: Set PRIMARY_IP environment variable
  ansible.builtin.lineinfile:
    path: /etc/environment
    line: "PRIMARY_IP={{ primary_ip.stdout }}"
    create: true
    mode: "0644"

# Set extra arguments for kubelet
- name: Configure kubelet extra args
  ansible.builtin.copy:
    dest: /etc/default/kubelet
    content: |
      KUBELET_EXTRA_ARGS='--node-ip {{ primary_ip.stdout }}'
    mode: "0644"
