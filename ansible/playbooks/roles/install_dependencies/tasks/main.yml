# Update apt cache
- name: Update apt cache
  ansible.builtin.apt:
    update_cache: true

# Install prerequisite packages for Kubernetes apt repository
- name: Install required packakges for Kubernetes
  ansible.builtin.apt:
    name:
      - apt-transport-https
      - ca-certificates
      - curl
    state: present

# Configure kernel modules and load them
- name: Ensure kernel modules are loaded
  community.general.modprobe:
    name: "{{ item }}"
    state: present
  loop:
    - overlay
    - br_netfilter

# Configure kernel parameters and apply them
- name: Set required kernel parameters
  ansible.builtin.copy:
    dest: /etc/sysctl.d/k8s.conf
    content: |
      net.bridge.bridge-nf-call-iptables  = 1
      net.bridge.bridge-nf-call-ip6tables = 1
      net.ipv4.ip_forward                 = 1
    mode: "0644"

- name: Apply kernel parameters
  ansible.posix.sysctl:
    name: "{{ item.name }}"
    value: "{{ item.value }}"
  loop:
    - { name: 'net.bridge.bridge-nf-call-iptables', value: '1' }
    - { name: 'net.bridge.bridge-nf-call-ip6tables', value: '1' }
    - { name: 'net.ipv4.ip_forward', value: '1' }

# Install container runtime (containerd)
- name: Install containerd
  ansible.builtin.apt:
    name: containerd
    state: present

- name: Ensure /etc/containerd directory exists
  ansible.builtin.file:
    path: /etc/containerd
    state: directory
    mode: "0755"

- name: Generate default containerd configuration
  ansible.builtin.command:
    cmd: containerd config default
  register: containerd_config
  changed_when: false

- name: Save default containerd configuration to file
  ansible.builtin.copy:
    dest: /etc/containerd/config.toml
    content: "{{ containerd_config.stdout }}"
    mode: "0644"
    force: true

- name: Ensure SystemdCgroup is set to true
  ansible.builtin.replace:
    path: /etc/containerd/config.toml
    regexp: '^(\s*)SystemdCgroup\s*=\s*false'
    replace: '\1SystemdCgroup = true'

- name: Restart containerd
  ansible.builtin.service:
    name: containerd
    state: restarted
    enabled: true

- name: Ensure /etc/apt/keyrings directory exists
  ansible.builtin.file:
    path: /etc/apt/keyrings
    state: directory
    mode: "0755"

- name: Get Kubernetes stable release version
  ansible.builtin.uri:
    url: https://dl.k8s.io/release/stable.txt
    return_content: true
  register: kubernetes_version

- name: Extract Kubernetes major.minor version
  ansible.builtin.set_fact:
    k8s_version: "{{ kubernetes_version.content.split('.')[0] }}.{{ kubernetes_version.content.split('.')[1] }}"

- name: Download Kubernetes public signing key
  ansible.builtin.get_url:
    url: "https://pkgs.k8s.io/core:/stable:/{{ k8s_version }}/deb/Release.key"
    dest: /tmp/kubernetes-release.key
    mode: "0644"

- name: Convert Kubernetes public signing key to GPG format
  ansible.builtin.command:
    cmd: "gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg /tmp/kubernetes-release.key"
  args:
    creates: /etc/apt/keyrings/kubernetes-apt-keyring.gpg

- name: Add Kubernetes apt repository
  ansible.builtin.apt_repository:
    repo: >-
      deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg]
      https://pkgs.k8s.io/core:/stable:/{{ k8s_version }}/deb/ /
    state: present
    filename: kubernetes

# Update apt package index and install Kubernetes tools
- name: Install kubelet, kubeadm, and kubectl
  ansible.builtin.apt:
    name:
      - kubelet
      - kubeadm
      - kubectl
    state: present
    update_cache: true

- name: Hold Kubernetes packages at their current version
  ansible.builtin.command: apt-mark hold kubelet kubeadm kubectl
  changed_when: false

- name: Configure crictl runtime endpoint
  ansible.builtin.blockinfile:
    path: /etc/crictl.yaml
    block: |
      runtime-endpoint: unix:///run/containerd/containerd.sock
      image-endpoint: unix:///run/containerd/containerd.sock
    create: true
    mode: "0644"

# Detect the primary IP and set it as an environment variable
- name: Gather Ansible facts
  ansible.builtin.setup:
    gather_subset:
      - network

- name: Set PRIMARY_IP environment variable
  ansible.builtin.blockinfile:
    path: /etc/environment
    block: |
      PRIMARY_IP={{ ansible_default_ipv4.address }}
    create: true
    mode: "0644"

# Set extra arguments for kubelet
- name: Set kubelet extra args
  ansible.builtin.lineinfile:
    path: /etc/default/kubelet
    line: "KUBELET_EXTRA_ARGS='--node-ip {{ ansible_default_ipv4.address }}'"
    create: true
    mode: "0644"
