terraform {
  required_providers {
    proxmox = {
      source  = "Telmate/proxmox"
      version = "3.0.1-rc6"
    }
  }
}

locals {
  ssh_public_key = file("~/.ssh/id_rsa.pub") # Read the SSH public key from the file
}

variable "ssh_public_key" {
  description = "SSH public key to access VMs"
  default     = "" # This can remain empty since we'll use `local.ssh_public_key`
}


data "vault_kv_secret_v2" "proxmox_token" {
  name  = "proxmox"
  mount = "secret" # Path to KV engine
}

provider "proxmox" {
  pm_api_url          = "https://192.168.1.10:8006/api2/json"
  pm_api_token_id     = "terraform-prov@pve!tid"
  pm_api_token_secret = data.vault_kv_secret_v2.proxmox_token.data.token
  pm_tls_insecure     = false
}

provider "vault" {}

variable "base_template_vm_id" {
  default = "ubuntu-cloud-template" # Replace with the VM ID of your base VM
}

variable "network" {
  default = {
    bridge  = "vmbr0"
    gateway = "192.168.1.1"
    subnet  = "192.168.1.130/24"
  }
}



# Control Plane Node
# resource "proxmox_vm_qemu" "control_plane" {
#   name        = "k8s-control-plane"
#   target_node = "proxmox"
#   clone       = var.base_template_vm_id
#   cores       = 4
#   memory      = 4096

#   # Add a Cloud-Init Disk
#   disk {
#     slot = "ide2" # Attach cloud-init disk to ide2
#     type = "cloudinit"
#     storage = "local-lvm-2" # Specify storage for cloud-init
#   }

#   # Main Disk
#   disk {
#     size    = "30G"
#     storage = "local-lvm-2"
#     type    = "disk"
#     slot    = "scsi0"
#   }

#   # Network Configuration
#   network {
#     model  = "virtio"
#     bridge = var.network.bridge
#     id     = 0
#   }

#   # Cloud-Init Configuration
#   ipconfig0 = "ip=192.168.1.130/24,gw=${var.network.gateway}"
#   # Inject SSH Keys using Cloud-Init
#   sshkeys = local.ssh_public_key
#   ciuser    = "sudo-amine"
# }

# Worker Nodes
resource "proxmox_vm_qemu" "worker_nodes" {
  count       = 1
  name        = "k8s-worker-${count.index + 1}"
  target_node = "proxmox"
  clone       = var.base_template_vm_id
  cores       = 2
  memory      = 2048
  agent       = 1

  full_clone = true

  # Add the correct SCSI controller
  scsihw = "virtio-scsi-pci" # Match the template configuration

  # Add a Cloud-Init Disk
  disk {
    slot    = "ide2" # Attach cloud-init disk to ide2
    type    = "cloudinit"
    storage = "local-lvm-2" # Specify storage for cloud-init
  }

  # Main Disk
  disk {
    storage = "local-lvm-2"
    type    = "disk"
    slot    = "scsi0" # Keep this the same
    size    = "22G"
  }

  # disks {
  #   ide {
  #     ide2 {
  #       cloudinit {
  #         storage = "local-lvm-2"
  #       }
  #     }
  #   }
  #   scsi {
  #     scsi0 {
  #       disk {
  #         size    = 30
  #         storage = "local-lvm-2"
  #       }
  #     }
  #   }
  # }

  # Network Configuration
  network {
    model  = "virtio"
    bridge = var.network.bridge
    id     = 0
  }

  serial {
    id   = 0
    type = "socket"
  }

  # Cloud-Init Configuration
  ipconfig0 = "ip=192.168.1.${131 + count.index}/24,gw=${var.network.gateway}"
  # Inject SSH Keys using Cloud-Init
  sshkeys = local.ssh_public_key
  ciuser  = "sudo-amine"
}
